{% extends 'base.html.twig' %}

{% block title %} - Formations{% endblock %}

{% block body %}
<div class="wrapper content">

    {# --- Start of Lesson Form --- #}
    {{ form_start(form, { attr: { 'data-turbo': 'false' } }) }}

    {# === Theme Selection === #}
    <h2>Thème de la formation</h2>
    {{ form_row(form.isNewTheme) }}
    <div id="existing-theme-fields">
        {{ form_row(form.selectedThemeId) }}
    </div>
    <div id="new-theme-fields" style="display: none;">
        {{ form_row(form.newThemeName) }}
        {{ form_row(form.newThemeImage) }}
    </div>

    {# === Cursus Selection === #}
    <h2>Cursus de la formation</h2>
    {{ form_row(form.isNewCursus) }}
    <div id="existing-cursus-fields">
        {{ form_row(form.selectedCursusId) }}
    </div>
    <div id="new-cursus-fields" style="display: none;">
        {{ form_row(form.newCursusName) }}
        {{ form_row(form.newCursusImage) }}
        {{ form_row(form.newCursusPrice) }}
    </div>

    {# === Lesson Details === #}
    <h2>Contenu de la formation</h2>
    {{ form_row(form.lessonName) }}
    {{ form_row(form.lessonPrice) }}
    {{ form_row(form.contentText) }}
    {{ form_row(form.contentVideoUrl) }}
    {{ form_row(form.description) }}
    {{ form_row(form.image) }}

    {# === Metadata (if editing) === #}
    {% if lesson %}
        <div class="mt-4">
            <p><strong>Créée le :</strong>
                {{ lesson.createdAt ? lesson.createdAt|date('d/m/Y H:i') : '—' }}
            </p>
            <p><strong>Créée par :</strong>
                {{ lesson.createdBy ? lesson.createdBy.email : '—' }}
            </p>
            <p><strong>Modifiée le :</strong>
                {{ lesson.updatedAt ? lesson.updatedAt|date('d/m/Y H:i') : '—' }}
            </p>
            <p><strong>Modifiée par :</strong>
                {{ lesson.updatedBy ? lesson.updatedBy.email : '—' }}
            </p>
        </div>
    {% endif %}

    {# === Submit Button === #}
    <button class="btn btn-primary mt-3">{{ lesson ? 'Modifier' : 'Ajouter' }}</button>

    {{ form_end(form) }}
    {# --- End of Lesson Form --- #}

    {# === Delete Form (only if editing) === #}
    {% if lesson %}
        <form method="post"
              action="{{ path('admin_lesson_delete', { id: lesson.id }) }}"
              onsubmit="return confirm('Êtes-vous sûr de vouloir supprimer cette formation ?');"
              class="mt-4">
            <input type="hidden" name="_token" value="{{ csrf_token('delete_lesson_' ~ lesson.id) }}">
            <button class="btn btn-danger">Supprimer</button>
        </form>
    {% endif %}

</div>

{# === JavaScript to Toggle Visibility for Theme/Cursus Inputs === #}
<script>
    document.addEventListener('DOMContentLoaded', () => {
        const isNewThemeCheckbox = document.querySelector('#{{ form.isNewTheme.vars.id }}');
        const isNewCursusCheckbox = document.querySelector('#{{ form.isNewCursus.vars.id }}');

        const existingThemeFields = document.getElementById('existing-theme-fields');
        const newThemeFields = document.getElementById('new-theme-fields');
        const existingCursusFields = document.getElementById('existing-cursus-fields');
        const newCursusFields = document.getElementById('new-cursus-fields');

        function toggleThemeFields() {
            existingThemeFields.style.display = isNewThemeCheckbox.checked ? 'none' : 'block';
            newThemeFields.style.display = isNewThemeCheckbox.checked ? 'block' : 'none';
        }

        function toggleCursusFields() {
            existingCursusFields.style.display = isNewCursusCheckbox.checked ? 'none' : 'block';
            newCursusFields.style.display = isNewCursusCheckbox.checked ? 'block' : 'none';
        }

        isNewThemeCheckbox.addEventListener('change', toggleThemeFields);
        isNewCursusCheckbox.addEventListener('change', toggleCursusFields);

        // Initial state
        toggleThemeFields();
        toggleCursusFields();

        // === Filtrage des cursus si un thème est sélectionné ===
        const themeSelect = document.querySelector('#{{ form.selectedThemeId.vars.id }}');
        const cursusSelect = document.querySelector('#{{ form.selectedCursusId.vars.id }}');

        if (themeSelect && cursusSelect) {
            themeSelect.addEventListener('change', () => {
                const themeId = themeSelect.value;
                if (!themeId) return;

                fetch('/admin/formation/cursus-par-theme?themeId=' + themeId)
                    .then(response => {
                        if (!response.ok) throw new Error('HTTP error ' + response.status);
                        return response.json();
                    })
                    .then(data => {
                        cursusSelect.innerHTML = '';
                        const defaultOption = document.createElement('option');
                        defaultOption.text = 'Choisir un cursus';
                        defaultOption.value = '';
                        cursusSelect.appendChild(defaultOption);
                        data.forEach(cursus => {
                            const option = document.createElement('option');
                            option.value = cursus.id;
                            option.text = cursus.name;
                            cursusSelect.appendChild(option);
                        });
                    })
                    .catch(error => {
                        console.error('Erreur lors de la récupération des cursus :', error);
                    });
            });
        }
    });
</script>

{% endblock %}
