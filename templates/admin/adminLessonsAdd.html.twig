{% extends 'base.html.twig' %}

{% block title %} - Formations{% endblock %}

{% block body %}
<div class="wrapper content">

    {# --- Lesson Form Start --- #}
    {{ form_start(form, { attr: { 'data-turbo': 'false' } }) }}

    {# === Theme Section === #}
    <h2>Thème de la formation</h2>
    {{ form_row(form.isNewTheme) }}
    <div id="existing-theme-fields">
        {{ form_row(form.selectedThemeId) }}
    </div>
    <div id="new-theme-fields" style="display: none;">
        {{ form_row(form.newThemeName) }}
        <div class="form-group">
            {{ form_label(form.newThemeImage) }}
            {% if theme and theme.image %}
                <div class="preview">
                    <img id="preview-theme" src="{{ asset('uploads/images/' ~ theme.image) }}" alt="Aperçu image" height="100">
                </div>
            {% endif %}
            {{ form_widget(form.newThemeImage, {'attr': {'onchange': 'previewImage(this, "preview-theme")'}}) }}
            {{ form_errors(form.newThemeImage) }}
        </div>
    </div>

    {# === Cursus Section === #}
    <h2>Cursus de la formation</h2>
    {{ form_row(form.isNewCursus) }}
    <div id="existing-cursus-fields">
        {{ form_row(form.selectedCursusId) }}
    </div>
    <div id="new-cursus-fields" style="display: none;">
        {{ form_row(form.newCursusName) }}
        <div class="form-group">
            {{ form_label(form.newCursusImage) }}
            {% if cursus and cursus.image %}
                <div class="preview">
                    <img id="preview-cursus" src="{{ asset('uploads/images/' ~ cursus.image) }}" alt="Aperçu image" height="100">
                </div>
            {% endif %}
            {{ form_widget(form.newCursusImage, {'attr': {'onchange': 'previewImage(this, "preview-cursus")'}}) }}
            {{ form_errors(form.newCursusImage) }}
        </div>
        {{ form_row(form.newCursusPrice) }}
    </div>

    {# === Lesson Details === #}
    <h2>Contenu de la formation</h2>
    {{ form_row(form.lessonName) }}
    {{ form_row(form.lessonPrice) }}
    {{ form_row(form.contentText) }}
    {{ form_row(form.videoFile) }}
    {{ form_row(form.description) }}
    <div class="form-group">
        {{ form_label(form.image) }}
        {% if lesson and lesson.image %}
            <div class="preview">
                <img id="preview-lesson" src="{{ asset('uploads/images/' ~ lesson.image) }}" alt="Aperçu image" height="100">
            </div>
        {% endif %}
        {{ form_widget(form.image, {'attr': {'onchange': 'previewImage(this, "preview-lesson")'}}) }}
        {{ form_errors(form.image) }}
    </div>

    {# === Metadata (only when editing) === #}
    {% if lesson %}
        <div class="responsabilities">
            <p><strong>Créée le :</strong> {{ lesson.createdAt ? lesson.createdAt|date('d/m/Y H:i') : '—' }}</p>
            <p><strong>Créée par :</strong> {{ lesson.createdBy ? lesson.createdBy.email : '—' }}</p>
            <p><strong>Modifiée le :</strong> {{ lesson.updatedAt ? lesson.updatedAt|date('d/m/Y H:i') : '—' }}</p>
            <p><strong>Modifiée par :</strong> {{ lesson.updatedBy ? lesson.updatedBy.email : '—' }}</p>
        </div>
    {% endif %}

    <button class="btn btn-primary mt-3">{{ lesson ? 'Modifier' : 'Ajouter' }}</button>

    {{ form_end(form) }}
    {# --- Lesson Form End --- #}

    {# === Delete Button if editing === #}
    {% if lesson %}
        <form method="post"
              action="{{ path('admin_lesson_delete', { id: lesson.id }) }}"
              onsubmit="return confirm('Êtes-vous sûr de vouloir supprimer cette formation ?');"
              class="mt-4">
            <input type="hidden" name="_token" value="{{ csrf_token('delete_lesson_' ~ lesson.id) }}">
            <button class="btn btn-danger">Supprimer</button>
        </form>
    {% endif %}
</div>

{# === JavaScript for Dynamic Fields === #}
<script>
    /**
     * Preview uploaded image for a given input and target preview container.
     * @param {HTMLInputElement} input
     * @param {string} previewId
     */
    function previewImage(input, previewId) {
        const file = input.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function (e) {
                let img = document.getElementById(previewId);
                if (!img) {
                    img = document.createElement('img');
                    img.id = previewId;
                    img.height = 100;
                    input.closest('.form-group').insertBefore(img, input);
                }
                img.src = e.target.result;
            };
            reader.readAsDataURL(file);
        }
    }

    /**
     * Initializes dynamic behavior once the page is fully loaded (even with Turbo Drive).
     */
    document.addEventListener('turbo:load', () => {
        let isUpdatingFromCursus = false;

        const isNewThemeCheckbox = document.querySelector('#{{ form.isNewTheme.vars.id }}');
        const isNewCursusCheckbox = document.querySelector('#{{ form.isNewCursus.vars.id }}');
        const existingThemeFields = document.getElementById('existing-theme-fields');
        const newThemeFields = document.getElementById('new-theme-fields');
        const existingCursusFields = document.getElementById('existing-cursus-fields');
        const newCursusFields = document.getElementById('new-cursus-fields');
        const themeSelect = document.querySelector('#{{ form.selectedThemeId.vars.id }}');
        const cursusSelect = document.querySelector('#{{ form.selectedCursusId.vars.id }}');

        function toggleThemeFields() {
            existingThemeFields.style.display = isNewThemeCheckbox.checked ? 'none' : 'block';
            newThemeFields.style.display = isNewThemeCheckbox.checked ? 'block' : 'none';
        }

        function toggleCursusFields() {
            existingCursusFields.style.display = isNewCursusCheckbox.checked ? 'none' : 'block';
            newCursusFields.style.display = isNewCursusCheckbox.checked ? 'block' : 'none';
        }

        function populateCursusOptions(cursuses, selectedId = null) {
            cursusSelect.innerHTML = '';
            const defaultOption = new Option('Choisir un cursus', '');
            cursusSelect.appendChild(defaultOption);

            cursuses.forEach(cursus => {
                const option = new Option(cursus.name, cursus.id);
                if (selectedId && selectedId == cursus.id) option.selected = true;
                cursusSelect.appendChild(option);
            });
        }

        // Initial display
        toggleThemeFields();
        toggleCursusFields();

        // Load initial cursus list
        fetch(`/admin/formation/cursus-par-theme${themeSelect.value ? `?themeId=${themeSelect.value}` : ''}`)
            .then(res => res.json())
            .then(data => {
                populateCursusOptions(data, cursusSelect.dataset.selected || cursusSelect.value);
            });

        // Change theme → reload cursus
        themeSelect.addEventListener('change', () => {
            const themeId = themeSelect.value;

            if (!themeId) {
                // Load all cursus if theme reset
                fetch(`/admin/formation/cursus-par-theme`)
                    .then(res => res.json())
                    .then(data => populateCursusOptions(data, cursusSelect.value));
                return;
            }

            fetch(`/admin/formation/cursus-par-theme?themeId=${themeId}`)
                .then(res => res.json())
                .then(data => populateCursusOptions(data, cursusSelect.value));
        });

        // Change cursus → update theme
        cursusSelect.addEventListener('change', () => {
            if (isUpdatingFromCursus) return;
            const cursusId = cursusSelect.value;
            if (!cursusId) return;

            fetch(`/admin/formation/theme-par-cursus?cursusId=${cursusId}`)
                .then(res => res.json())
                .then(data => {
                    if (data.id) {
                        isUpdatingFromCursus = true;
                        themeSelect.value = data.id;

                        fetch(`/admin/formation/cursus-par-theme?themeId=${data.id}`)
                            .then(res => res.json())
                            .then(cursusList => {
                                populateCursusOptions(cursusList, cursusId);
                                isUpdatingFromCursus = false;
                            });
                    }
                });
        });

        isNewThemeCheckbox.addEventListener('change', toggleThemeFields);
        isNewCursusCheckbox.addEventListener('change', toggleCursusFields);
    });
</script>

{% endblock %}
